# LIST MANIPULATION IN PYTHON
# A. match_ends
# Given a list of strings, return the count of the number of strings where the string length is 2 or 
# more and the first and last chars of the string are the same.
# Note: python does not have a ++ operator, but += works.

test_input = ['fif', 'xyz', 'apple', 'xix', 'aardvark']

def match_ends(words):
    counter = 0
    for w in words:
        if len(w) >= 2 and w[0] == w[-1]:
            counter = counter + 1
    return counter

print(match_ends(test_input))

# B. front_x
# Given a list of strings, return a list with the strings in sorted order, except group all the 
# strings that begin with 'x' first.
# e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
# Hint: this can be done by making 2 lists and sorting each of them before combining them.

test_input2 = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']

def front_x(words):
    list1 = []
    list2 = []
    
    for w in words :
        if w[0].lower() == "x" :
            list1.append(w)
        else :
            list2.append(w)
    
    list1.sort()
    list2.sort()
    
    list1.extend(list2)
    
    return list1

print(front_x(test_input2))


# C. sort_last
# Given a list of non-empty tuples, return a list sorted in increasing order by the last element in each tuple.
# e.g. [(1, 7), (1, 3), (3, 4, 5), (2, 2)] yields [(2, 2), (1, 3), (3, 4, 5), (1, 7)]
# Hint: use a custom key= function to extract the last element form each tuple.

test_input3 = [(1, 7), (1, 3), (3, 4, 5), (2, 2)]

def sort_last(tuples):
    
    dictionri = {}
    
    for t in tuples :
        dictionri[t[-1]] = t
    
    vals = list(dictionri.values())
    
    return vals

print(sort_last(test_input3))

# Simple provided test() function used in main() to print what each function returns vs. what it's supposed to return.

def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)

# Calls the above functions with interesting inputs.

def main():
    print 'match_ends'
    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)
    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)
    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)

    print
    print 'front_x'
    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),
        ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])
    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),
        ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])
    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),
        ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])
    
    print
    print 'sort_last'
    test(sort_last([(1, 3), (3, 2), (2, 1)]),
         [(2, 1), (3, 2), (1, 3)])
    test(sort_last([(2, 3), (1, 2), (3, 1)]),
         [(3, 1), (1, 2), (2, 3)])
    test(sort_last([(1, 7), (1, 3), (3, 4, 5), (2, 2)]),
         [(2, 2), (1, 3), (3, 4, 5), (1, 7)])
         
# We call the main function.

main()


# D. remove_adjacent
# Given a list of numbers, return a list where all adjacent == elements have 
# been reduced to a single element, so [1, 2, 2, 3] returns [1, 2, 3]. You 
# may create a new list or modify the passed in list.

test_input4 = [1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 9, 11, 12, 12, 15]

def remove_adjacent(nums):
    cur      = 0
    prev     = 0
    counter  = 1
    new_list = []
    
    for n in nums :
        if counter == 1 :
            cur  = n
            prev = n
            new_list.append(cur)
        else :
            cur = n
            if cur != prev :
                new_list.append(cur)
        prev = n
        counter = counter + 1
    
    return new_list

print(remove_adjacent(test_input4))


# E. linear_merge
# Given two lists sorted in increasing order, create and return a merged 
# list of all the elements in sorted order. You may modify the passed in 
# lists. Ideally, the solution should work in "linear" time, making a single pass of both lists.

test_input5 = ['aa', 'xx', 'zz']
test_input6 = ['bb', 'cc']

def linear_merge(list1, list2):
    list1.extend(list2)
    list1.sort()
    return list1

print(linear_merge(test_input5, test_input6))

# Calls the above functions with interesting inputs.
def main():
    print 'remove_adjacent'
    test(remove_adjacent([1, 2, 2, 3]), [1, 2, 3])
    test(remove_adjacent([2, 2, 3, 3, 3]), [2, 3])
    test(remove_adjacent([]), [])

    print
    print 'linear_merge'
    test(linear_merge(['aa', 'xx', 'zz'], ['bb', 'cc']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'xx'], ['bb', 'cc', 'zz']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'aa'], ['aa', 'bb', 'bb']),
        ['aa', 'aa', 'aa', 'bb', 'bb'])

# We call the main function.

main()








